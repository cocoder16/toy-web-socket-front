* 한글 입력하다가 엔터 누를 시 onKeyDown이나 onKeyUp 이벤트는 두번 발생한다. 그로 인한 사이드 이팩트가 있어서
한글 입력하다가 엔터 누르는 이벤트를 1회만 처리하고 싶을 때에는 onKeyPress를 사용한다.
(물론 boolean 변수 하나로 flag 조건으로 제어도 필요하다.)

* socket test code

1. socket test는 실제 서버가 꺼져도 돌아가야함. 즉 서버의존성이 없어야함.
따라서 mock을 해야함.
(+) 프론트 코드와는 의존성을 가져야함. 프론트 코드가 망가지면 테스트 코드가 통과못해야함.

```
jest.mock("src/service/socket");
```

2. socket ping pong 테스트를 하는법

socket mock을 했다면 ping pong test code를 작성한다.

1) ping (socket.emit)

step 1. UI단에서 이벤트 발생 테스트 코드를 만든다. fireEvent 이용.
step 2. mock socket 이 기대하는 이벤트를 emit하는지를 검사한다.

ex)
```
expect(socket.emit).toHaveBeenCalledWith("SEND", {
  user: { name: defaultProps.nickname },
  content: "hi!",
});
```

2) pong (socket.on)

step 1. 리스너를 설치하기 위해 jest.spyOn() 을 사용한다.

```
jest.spyOn(socket, "on");
```

step 2. emit 이후에 on이 적절한 횟수만큼 호출되었는지와, 적절한 이벤트 타입을 받았는지를 검사한다. 콜백 함수는 익명으로 들어오므로 any로 처리한다.

expect(socket.on).toBeCalledTimes(1);
expect(socket.on).toBeCalledWith("RECEIVE", expect.any(Function));

step 3. socket test는 아니지만 부수효과를 테스트 한다. 이벤트 리스너 콜백 이후에 기대하는 것을 테스트 한다.
(렌더링, state 변화 등등..)
